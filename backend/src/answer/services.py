from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from src.answer.models import Answer


class AnswerManager:
    def __init__(self, db: AsyncSession):
        self.db = db

    async def create_answer(self, question_id: UUID, answer_text: str) -> Answer:
        """
        Create a new answer associated with a question.
        :param question_id: UUID of the related question.
        :param answer_text: The answer text generated by the model.
        :return: The created Answer object.
        """
        try:
            answer = await self._create({
                "question_id": question_id,
                "answer_text": answer_text
            })
            return answer
        except ValueError as e:
            raise ValueError({
                "error": "Error creating answer",
                "details": str(e),
                "method": "AnswerManager.create_answer"
            })

    async def _create(self, payload: dict, is_flush: bool = False) -> Answer:
        """
        Internal method to create an Answer object.
        :param payload: Dictionary with keys 'question_id' and 'answer_text'.
        :param is_flush: Whether to flush or commit after add.
        :return: Created Answer object.
        """
        try:
            answer = Answer(**payload)
            self.db.add(answer)
            if is_flush:
                await self.db.flush()
            else:
                await self.db.commit()
            await self.db.refresh(answer)
            return answer
        except Exception as e:
            raise ValueError({
                "error": "Error creating answer",
                "details": str(e),
                "method": "AnswerManager._create"
            })

